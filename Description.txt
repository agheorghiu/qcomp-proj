Instruction set:

Classical
		Logical:
			NOT R1 R2
				- negate value in register R1, result placed in R2
		
			AND R1 R2 R3
				- logical AND between the values of registers R1 and R2, result placed in R3
				
			OR R1 R2 R3
				- logical OR between the values of registers R1 and R2, result placed in R3
				
			XOR R1 R2 R3
				- logical XOR between the values of registers R1 and R2, result placed in R3
				
		Arithmetic:
			ADD R1 R2 R3
				- add values in registers R1 and R2, result placed in R3
				
			SUB R1 R2 R3
				- subtract value in register R2 from the value in register R1, result placed in R3
				
			MUL R1 R2 R3
				- multiply values in registers R1 and R2, result placed in R3
				
			DIV R1 R2 R3
				- divide values in registers R1 and R2, result placed in R3
				
		Comparison:
			GT R1 R2 R3
				- sets R3 to 1 if value in R1 greater than value in R2, 0 otherwise
				
			LT R1 R2 R3
				- sets R3 to 1 if value in R1 less than value in R2, 0 otherwise
				
			EQ R1 R2 R3
				- sets R3 to 1 if value in R1 equal to value in R2, 0 otherwise
				
		Memory:
			LOAD R1 [R2 + offset]
				- load in R1 2 qubytes starting from memory address R2 + offset
			
			LOADB R1 [R2 + offset]
				- load in R1 1 qubyte starting from memory address R2 + offset
			
			STORE R1 [R2 + offset]
				- store at memory address R2 + offset the 2 qubytes in R1
				
			STOREB R1 [R2 + offset]
				- store at memory address R2 + offset the least significant qubyte in R1
				
			NEW label R1
				- allocate object of type label in memory, starting address placed in register R1
				
			ALLOC R1 R2
				- allocate R1 qubytes and return address of allocated area in R2
				
			PUT R1 R2
				- put at index R1 the contents of register R2 in mapped memory
				
			GET R1 R2
				- get from index R1 content and put it in register R2 from mapped memory
	
		Jump:
			JUMP label
				- instruction pointer jumps to label, execution resumed from that point
			
			JUMPT label R1
				- instruction pointer jumps to label if the value of register R1 is not 0
				
			JUMPF label R1
				- instruction pointer jumps to label if the value of register R1 is 0
				
			CALL label
				- call function "label", place result in R1. Saves current instruction pointer,
				jumps to label and continues execution from there. Result placed in default
				register for function return value
			
			RET R1
				- puts value of R1 in default register for function return value, then 
				pops instruction pointer from stack and resumes execution from that point
			
		Stack:
			PUSH R1
				- pushes value of register R1 onto the stack
				
			POP R1
				- pops current stack value into register R1
				
		Other:
			MOV R1 R2
				- copy value from R1 into R2
				
			SWAP R1 R2
				- swap value register R1 with value in register R2 and viceversa
				
			SWAPB R1
				- swap qubytes in R1
				
			SHL R1
				- shift left qubits in R1
				
			SHR R1
				- shift right qubits in R1
				
Quantum
		QMOV R1 R2
			- quantum teleports content of R1 into R2. R1 is now filled with 0s

		CNOT R1
			- controlled not of least significant qubyte in R1 using most significant
			qubyte as control
								
		X R1 R2
			- flip qubits in R1 using R2 as mask

		Y R1 R2
			- rotation around Y axis of qubits in R1 using R2 as mask			
			
		Z R1 R2
			- phase flip qubits in R1 using R2 as mask
			
		T R1 R2
			- apply a pi/4 rotation to qubits in R1	using R2 as mask
			
		S R1 R2
			- apply phase change (sqrt(Z) gate) of qubits in R1 using R2 as mask

		H R1 R2
			- apply Haddamard transform to individual qubits in R1 using R2 as mask
			
		ROT R1 R2 R3
			- apply rotation to qubits in register R1, using R2 as mask and R3 as angle
			(expressed in degrees)
						
		REV R1
			- reverse order of qubits in R1
			
		MEAS R1 R2
			- measure (collapse) in the computational basis qubits in R1 using R2 as mask
			
		RAND R1
			- generates true random value (through quantum measurement) and places it in R1
				
For all except MEAS and RAND we also have inverse operations (ICNOT, IX, IY etc).	

High-level:

	Types:
		qword - Quantum word type. A 16-qubit value. Representation is identical to Int, difference comes from type checking
		(some functions are restricted to only using qwords). Can be used as Int, but Int cannot be used as qword.

		qfunct - Quantum function type. Is equivalent to a unitary operator. Can only operate on qwords. Since unitary
		operators must have the same size for both input and output and since a function can receive a variable
		number of parameters, a quantum function does not have a return type and will instead dirrectly modify the
		qword arguments.
		
	Functions:
		
		